{"remainingRequest":"D:\\Desktop\\pagepro\\lsying\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Desktop\\pagepro\\lsying\\src\\components\\TreeSelect\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Desktop\\pagepro\\lsying\\src\\components\\TreeSelect\\index.vue","mtime":1609569561000},{"path":"D:\\Desktop\\pagepro\\lsying\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\Desktop\\pagepro\\lsying\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Desktop\\pagepro\\lsying\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"TreeSelect\",\n  props: {\n    data: {\n      type: Array,\n      default: null\n    },\n    props: {\n      type: Object,\n      default() {\n        return { label: 'name', children: 'children' }\n      }\n    },\n    showFilterInput: {\n      type: Boolean,\n      default: true\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    selectKey: {\n      type: Number,\n      default: null\n    },\n    selectLabel: {\n      type: String,\n      default: null\n    },\n    placeholder: {\n      type: String,\n      default: \"请选择\"\n    },\n    clearable: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      nodeKey: 'id',\n      valueId: null,\n      filterText: '',\n      checkedKeys: [1],\n      visible: false,\n      selectNodeKey: null,\n      selectNodeLabel: null,\n      currentNode: null,\n      currentData: null\n    }\n  },\n  created() {\n\n  },\n  mounted() {\n\n  },\n  watch: {\n    filterText(val) {\n      this.$refs.tree.filter(val);\n    },\n    selectKey() {\n      this.selectNodeKey = this.selectKey\n    },\n    selectLabel() {\n      this.selectNodeLabel = this.selectLabel\n    },\n    selectNode() {\n      this.currentNode = this.selectNode\n    },\n    selectData() {\n      this.currentData = this.selectData\n    }\n  },\n  methods: {\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.name.indexOf(value) !== -1;\n    },\n    handleChange(data, node) {\n      this.visible = false\n      this.selectNodeKey = node.key\n      this.selectNodeLabel = node.label\n      this.currentNode = node\n      this.currentData = node.data\n      this.updateParentData(data, node)\n    },\n    handleClear() {\n      this.visible = false\n      this.selectNodeKey = null\n      this.selectNodeLabel = null\n      this.currentNode = null\n      this.currentData = null\n      this.filterText = null\n      this.updateParentData(null, null)\n    },\n    updateParentData(data, node) {\n      this.$emit('update:selectKey', this.selectNodeKey)\n      this.$emit('update:selectLabel', this.selectNodeLabel)\n      this.$emit('update:selectNode', this.currentNode)\n      this.$emit('update:selectData', this.currentData)\n      this.$emit('change', data, node)\n    },\n    setValue(key, label) {\n      this.selectNodeKey = key\n      this.selectNodeLabel = label\n    },\n    getNode(key) {\n      if (key) {\n        this.$refs.tree.setCurrentKey(key)\n        const node = this.$refs.tree.getNode(key)\n        this.selectNodeLabel = node.label\n        this.currentNode = node\n        this.currentData = node.data\n      }\n    }\n  }\n}\n",null]}