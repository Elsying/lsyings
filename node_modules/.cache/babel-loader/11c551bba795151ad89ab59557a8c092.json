{"remainingRequest":"C:\\Users\\r7000\\Desktop\\pagepro\\lsying\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\r7000\\Desktop\\pagepro\\lsying\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\r7000\\Desktop\\pagepro\\lsying\\src\\utils\\request.js","dependencies":[{"path":"C:\\Users\\r7000\\Desktop\\pagepro\\lsying\\src\\utils\\request.js","mtime":1609569561000},{"path":"C:\\Users\\r7000\\Desktop\\pagepro\\lsying\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\r7000\\Desktop\\pagepro\\lsying\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\r7000\\Desktop\\pagepro\\lsying\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport axios from 'axios';\nimport { MessageBox, Message } from 'element-ui';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth'; // https://github.com/axios/axios\n// create an axios instance\n\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  // withCredentials: true, // send cookies when cross-domain requests\n  // timeout: 5000 // request timeout\n  timeout: 50000 // request timeout\n\n}); // request interceptor\n\nservice.interceptors.request.use(function (config) {\n  // do something before request is sent\n  if (store.getters.token) {\n    // let each request carry token\n    // ['X-Token'] is a custom headers key\n    // please modify it according to the actual situation\n    // config.headers['X-Token'] = getToken()\n    config.headers['token'] = getToken();\n  }\n\n  return config;\n}, function (error) {\n  // do something with request error\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\n * If you want to get http information such as headers or status\n * Please return  response => response\n*/\n\n/**\n * Determine the request status by custom code\n * Here is just an example\n * You can also judge the status by HTTP Status Code\n */\nfunction (response) {\n  var res = response.data;\n  var code = res.code;\n  var resultData = response.data.data; // if the custom code is not 20000, it is judged as an error.\n\n  if (code !== 200) {\n    // 5001: 请求参数校验异常\n    if (code === 5001) {\n      var errorMessage = '';\n\n      if (resultData) {\n        if (resultData instanceof Array) {\n          var length = resultData.length;\n          resultData.forEach(function (item, index) {\n            console.log(index + '-' + item);\n            errorMessage += item;\n\n            if (index !== length - 1) {\n              errorMessage += \"<br/><br/>\";\n            }\n          });\n        } else {\n          errorMessage += resultData;\n        }\n      } else {\n        errorMessage = '请求参数校验异常';\n      }\n\n      Message({\n        message: errorMessage || 'Error',\n        type: 'error',\n        dangerouslyUseHTMLString: true,\n        duration: 5 * 1000\n      });\n    } else if (code === 50008 || code === 50012 || code === 50014) {\n      // to re-login\n      MessageBox.confirm('You have been logged out, you can cancel to stay on this page, or log in again', 'Confirm logout', {\n        confirmButtonText: 'Re-Login',\n        cancelButtonText: 'Cancel',\n        type: 'warning'\n      }).then(function () {\n        store.dispatch('user/resetToken').then(function () {\n          location.reload();\n        });\n      });\n    } else {\n      Message({\n        message: res.message || 'Error',\n        type: 'error',\n        duration: 5 * 1000\n      });\n    }\n\n    Promise.reject(new Error(res.message || 'Error')); // 当状态码不是200时，是否需要返回响应结果给调用方\n\n    return res;\n  } else {\n    return res;\n  }\n}, function (error) {\n  if (+error.response.data.code === 401) {\n    var myDate = new Date();\n    myDate.setTime(-1000); // 设置时间\n\n    var data = document.cookie;\n    var dataArray = data.split(\"; \");\n\n    for (var i = 0; i < dataArray.length; i++) {\n      var varName = dataArray[i].split(\"=\");\n      document.cookie = varName[0] + \"=''; expires=\" + myDate.toGMTString();\n    }\n\n    window.location.hash = '#/login';\n  }\n\n  console.log('err' + error); // for debug\n\n  Message({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;",null]}